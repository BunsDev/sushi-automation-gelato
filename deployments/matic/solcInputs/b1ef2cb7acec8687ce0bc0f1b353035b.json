{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/kashi/IKashiPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.11;\n\nimport \"./IOracle.sol\";\n\ninterface IKashiPair {\n    function oracle() external view returns (IOracle);\n\n    function oracleData() external view returns (bytes memory);\n\n    function updateExchangeRate() external returns (bool updated, uint256 rate);\n\n    function exchangeRate() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/kashi/IOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\ninterface IOracle {\n    /// @notice Get the latest exchange rate.\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\n    /// For example:\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\n    /// @return success if no valid (recent) rate is available, return false else true.\n    /// @return rate The rate of the requested asset / pair / pool.\n    function get(bytes calldata data)\n        external\n        returns (bool success, uint256 rate);\n\n    /// @notice Check the last exchange rate without any state changes.\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\n    /// For example:\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\n    /// @return success if no valid (recent) rate is available, return false else true.\n    /// @return rate The rate of the requested asset / pair / pool.\n    function peek(bytes calldata data)\n        external\n        view\n        returns (bool success, uint256 rate);\n\n    /// @notice Check the current spot exchange rate without any state changes. For oracles like TWAP this will be different from peek().\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\n    /// For example:\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\n    /// @return rate The rate of the requested asset / pair / pool.\n    function peekSpot(bytes calldata data) external view returns (uint256 rate);\n\n    /// @notice Returns a human readable (short) name about this oracle.\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\n    /// For example:\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\n    /// @return (string) A human readable symbol name about this oracle.\n    function symbol(bytes calldata data) external view returns (string memory);\n\n    /// @notice Returns a human readable name about this oracle.\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\n    /// For example:\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\n    /// @return (string) A human readable name about this oracle.\n    function name(bytes calldata data) external view returns (string memory);\n}\n"
    },
    "contracts/interfaces/kashi/IResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.11;\n\nimport \"./IKashiPair.sol\";\n\ninterface IResolver {\n    function updateExchangeRateForPairs(IKashiPair[] memory kashiPairs)\n        external;\n\n    function checker(IKashiPair[] memory kashiPairs)\n        external\n        view\n        returns (bool canExec, bytes memory execPayload);\n}\n"
    },
    "contracts/kashi/KashiExchangeRateResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.11;\n\nimport \"../interfaces/kashi/IResolver.sol\";\n\ncontract KashiExchangeRateResolver is IResolver {\n    function updateExchangeRateForPairs(IKashiPair[] memory kashiPairs)\n        external\n    {\n        for (uint256 i; i < kashiPairs.length; i++) {\n            if (address(kashiPairs[i]) != address(0)) {\n                kashiPairs[i].updateExchangeRate();\n            }\n        }\n    }\n\n    function checker(IKashiPair[] memory kashiPairs)\n        external\n        view\n        override\n        returns (bool canExec, bytes memory execPayload)\n    {\n        IKashiPair[] memory pairsToUpdate = new IKashiPair[](kashiPairs.length);\n\n        for (uint256 i; i < kashiPairs.length; i++) {\n            IOracle oracle = kashiPairs[i].oracle();\n            bytes memory oracleData = kashiPairs[i].oracleData();\n            uint256 lastExchangeRate = kashiPairs[i].exchangeRate();\n            (bool updated, uint256 rate) = oracle.peek(oracleData);\n            if (updated) {\n                uint256 deviation = ((\n                    lastExchangeRate > rate\n                        ? lastExchangeRate - rate\n                        : rate - lastExchangeRate\n                ) * 100) / lastExchangeRate;\n                if (deviation > 20) {\n                    pairsToUpdate[i] = kashiPairs[i];\n                    canExec = true;\n                }\n            }\n        }\n\n        if (canExec) {\n            execPayload = abi.encodeWithSignature(\n                \"updateExchangeRateForPairs(address[])\",\n                pairsToUpdate\n            );\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 999999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}