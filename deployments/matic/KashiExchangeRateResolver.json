{
  "address": "0x5B7F0e72b73Bef7a10C3505b33a4bE37B231c872",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IKashiPair[]",
          "name": "kashiPairs",
          "type": "address[]"
        }
      ],
      "name": "checker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canExec",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "execPayload",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKashiPair[]",
          "name": "kashiPairs",
          "type": "address[]"
        }
      ],
      "name": "updateExchangeRateForPairs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaa574f00ab406d669c6088f0f0af855b552c38b62f228aeadfa25d58f1a05945",
  "receipt": {
    "to": null,
    "from": "0x111e5E8aEf53071f7f2dB4a3C95Bb7c3BDd62579",
    "contractAddress": "0x5B7F0e72b73Bef7a10C3505b33a4bE37B231c872",
    "transactionIndex": 0,
    "gasUsed": "622682",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000108000000000000000000000001000000000000000000000000004000000800000000000000000000100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000040000100000000000000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x922d84a8d6fe8a1dca163f1316f94e594c4062e29cbb5bf2ca82b9ff01035e22",
    "transactionHash": "0xaa574f00ab406d669c6088f0f0af855b552c38b62f228aeadfa25d58f1a05945",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 24705676,
        "transactionHash": "0xaa574f00ab406d669c6088f0f0af855b552c38b62f228aeadfa25d58f1a05945",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000111e5e8aef53071f7f2db4a3c95bb7c3bdd62579",
          "0x00000000000000000000000026c80cc193b27d73d2c40943acec77f4da2c5bd8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000dd373152e049f60000000000000000000000000000000000000000000000000f3b6070627fe4000000000000000000000000000000000000000000000004ecd94e01a41d0d1d550000000000000000000000000000000000000000000000000e5e293f0f9f9a0a0000000000000000000000000000000000000000000004ecda2b38d56fed674b",
        "logIndex": 0,
        "blockHash": "0x922d84a8d6fe8a1dca163f1316f94e594c4062e29cbb5bf2ca82b9ff01035e22"
      }
    ],
    "blockNumber": 24705676,
    "cumulativeGasUsed": "622682",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "b1ef2cb7acec8687ce0bc0f1b353035b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IKashiPair[]\",\"name\":\"kashiPairs\",\"type\":\"address[]\"}],\"name\":\"checker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canExec\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"execPayload\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKashiPair[]\",\"name\":\"kashiPairs\",\"type\":\"address[]\"}],\"name\":\"updateExchangeRateForPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/kashi/KashiExchangeRateResolver.sol\":\"KashiExchangeRateResolver\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/interfaces/kashi/IKashiPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./IOracle.sol\\\";\\n\\ninterface IKashiPair {\\n    function oracle() external view returns (IOracle);\\n\\n    function oracleData() external view returns (bytes memory);\\n\\n    function updateExchangeRate() external returns (bool updated, uint256 rate);\\n\\n    function exchangeRate() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2fb47a84d52dd1bc144941eee4b6ed1ea177e44865bfabb515be73784a9e936f\",\"license\":\"MIT\"},\"contracts/interfaces/kashi/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IOracle {\\n    /// @notice Get the latest exchange rate.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return success if no valid (recent) rate is available, return false else true.\\n    /// @return rate The rate of the requested asset / pair / pool.\\n    function get(bytes calldata data)\\n        external\\n        returns (bool success, uint256 rate);\\n\\n    /// @notice Check the last exchange rate without any state changes.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return success if no valid (recent) rate is available, return false else true.\\n    /// @return rate The rate of the requested asset / pair / pool.\\n    function peek(bytes calldata data)\\n        external\\n        view\\n        returns (bool success, uint256 rate);\\n\\n    /// @notice Check the current spot exchange rate without any state changes. For oracles like TWAP this will be different from peek().\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return rate The rate of the requested asset / pair / pool.\\n    function peekSpot(bytes calldata data) external view returns (uint256 rate);\\n\\n    /// @notice Returns a human readable (short) name about this oracle.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return (string) A human readable symbol name about this oracle.\\n    function symbol(bytes calldata data) external view returns (string memory);\\n\\n    /// @notice Returns a human readable name about this oracle.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return (string) A human readable name about this oracle.\\n    function name(bytes calldata data) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x33effe75445d91205c9d068f115a08daa53ea8a905f60d191024b2b33050c670\",\"license\":\"MIT\"},\"contracts/interfaces/kashi/IResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./IKashiPair.sol\\\";\\n\\ninterface IResolver {\\n    function updateExchangeRateForPairs(IKashiPair[] memory kashiPairs)\\n        external;\\n\\n    function checker(IKashiPair[] memory kashiPairs)\\n        external\\n        view\\n        returns (bool canExec, bytes memory execPayload);\\n}\\n\",\"keccak256\":\"0x820b49683b0e47cf11410d4a5b98559f3a231299c18f58d9a6fbbd10a13efb28\",\"license\":\"MIT\"},\"contracts/kashi/KashiExchangeRateResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/kashi/IResolver.sol\\\";\\n\\ncontract KashiExchangeRateResolver is IResolver {\\n    function updateExchangeRateForPairs(IKashiPair[] memory kashiPairs)\\n        external\\n    {\\n        for (uint256 i; i < kashiPairs.length; i++) {\\n            if (address(kashiPairs[i]) != address(0)) {\\n                kashiPairs[i].updateExchangeRate();\\n            }\\n        }\\n    }\\n\\n    function checker(IKashiPair[] memory kashiPairs)\\n        external\\n        view\\n        override\\n        returns (bool canExec, bytes memory execPayload)\\n    {\\n        IKashiPair[] memory pairsToUpdate = new IKashiPair[](kashiPairs.length);\\n\\n        for (uint256 i; i < kashiPairs.length; i++) {\\n            IOracle oracle = kashiPairs[i].oracle();\\n            bytes memory oracleData = kashiPairs[i].oracleData();\\n            uint256 lastExchangeRate = kashiPairs[i].exchangeRate();\\n            (bool updated, uint256 rate) = oracle.peek(oracleData);\\n            if (updated) {\\n                uint256 deviation = ((\\n                    lastExchangeRate > rate\\n                        ? lastExchangeRate - rate\\n                        : rate - lastExchangeRate\\n                ) * 100) / lastExchangeRate;\\n                if (deviation > 20) {\\n                    pairsToUpdate[i] = kashiPairs[i];\\n                    canExec = true;\\n                }\\n            }\\n        }\\n\\n        if (canExec) {\\n            execPayload = abi.encodeWithSignature(\\n                \\\"updateExchangeRateForPairs(address[])\\\",\\n                pairsToUpdate\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x77af87de4610d2d3db12fb447c56c7b5949332a8ac467224947995bc55112e50\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610a55806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063848438c71461003b578063f4997b9914610065575b600080fd5b61004e61004936600461061b565b61007a565b60405161005c929190610747565b60405180910390f35b61007861007336600461061b565b61047d565b005b600060606000835167ffffffffffffffff81111561009a5761009a610578565b6040519080825280602002602001820160405280156100c3578160200160208202803683370190505b50905060005b84518110156103e65760008582815181106100e6576100e661076a565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16637dc0d1d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610138573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015c9190610799565b905060008683815181106101725761017261076a565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166374645ff36040518163ffffffff1660e01b8152600401600060405180830381865afa1580156101c4573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261020a91908101906107bd565b905060008784815181106102205761022061076a565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16633ba0b9a96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610272573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610296919061086f565b90506000808473ffffffffffffffffffffffffffffffffffffffff1663eeb8a8d3856040518263ffffffff1660e01b81526004016102d49190610888565b6040805180830381865afa1580156102f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610314919061089b565b9150915081156103ce576000838285116103375761033285846108fd565b610341565b61034183866108fd565b61034c906064610914565b6103569190610951565b905060148111156103cc578a87815181106103735761037361076a565b602002602001015188888151811061038d5761038d61076a565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600199505b505b505050505080806103de9061098c565b9150506100c9565b50821561047757806040516024016103fe91906109c5565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff4997b990000000000000000000000000000000000000000000000000000000017905291505b50915091565b60005b815181101561057457600073ffffffffffffffffffffffffffffffffffffffff168282815181106104b3576104b361076a565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614610562578181815181106104e8576104e861076a565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166302ce728f6040518163ffffffff1660e01b815260040160408051808303816000875af115801561053b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055f919061089b565b50505b8061056c8161098c565b915050610480565b5050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156105ee576105ee610578565b604052919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461061857600080fd5b50565b6000602080838503121561062e57600080fd5b823567ffffffffffffffff8082111561064657600080fd5b818501915085601f83011261065a57600080fd5b81358181111561066c5761066c610578565b8060051b915061067d8483016105a7565b818152918301840191848101908884111561069757600080fd5b938501935b838510156106c157843592506106b1836105f6565b828252938501939085019061069c565b98975050505050505050565b60005b838110156106e85781810151838201526020016106d0565b838111156106f7576000848401525b50505050565b600081518084526107158160208601602086016106cd565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b821515815260406020820152600061076260408301846106fd565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156107ab57600080fd5b81516107b6816105f6565b9392505050565b6000602082840312156107cf57600080fd5b815167ffffffffffffffff808211156107e757600080fd5b818401915084601f8301126107fb57600080fd5b81518181111561080d5761080d610578565b61083e60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016105a7565b915080825285602082850101111561085557600080fd5b6108668160208401602086016106cd565b50949350505050565b60006020828403121561088157600080fd5b5051919050565b6020815260006107b660208301846106fd565b600080604083850312156108ae57600080fd5b825180151581146108be57600080fd5b6020939093015192949293505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561090f5761090f6108ce565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561094c5761094c6108ce565b500290565b600082610987577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156109be576109be6108ce565b5060010190565b6020808252825182820181905260009190848201906040850190845b81811015610a1357835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016109e1565b5090969550505050505056fea26469706673582212208178873717af20d00366e85ae4e5438f9da51fe74b6a4a8752b9c59679bb112864736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063848438c71461003b578063f4997b9914610065575b600080fd5b61004e61004936600461061b565b61007a565b60405161005c929190610747565b60405180910390f35b61007861007336600461061b565b61047d565b005b600060606000835167ffffffffffffffff81111561009a5761009a610578565b6040519080825280602002602001820160405280156100c3578160200160208202803683370190505b50905060005b84518110156103e65760008582815181106100e6576100e661076a565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16637dc0d1d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610138573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015c9190610799565b905060008683815181106101725761017261076a565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166374645ff36040518163ffffffff1660e01b8152600401600060405180830381865afa1580156101c4573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261020a91908101906107bd565b905060008784815181106102205761022061076a565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16633ba0b9a96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610272573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610296919061086f565b90506000808473ffffffffffffffffffffffffffffffffffffffff1663eeb8a8d3856040518263ffffffff1660e01b81526004016102d49190610888565b6040805180830381865afa1580156102f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610314919061089b565b9150915081156103ce576000838285116103375761033285846108fd565b610341565b61034183866108fd565b61034c906064610914565b6103569190610951565b905060148111156103cc578a87815181106103735761037361076a565b602002602001015188888151811061038d5761038d61076a565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600199505b505b505050505080806103de9061098c565b9150506100c9565b50821561047757806040516024016103fe91906109c5565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff4997b990000000000000000000000000000000000000000000000000000000017905291505b50915091565b60005b815181101561057457600073ffffffffffffffffffffffffffffffffffffffff168282815181106104b3576104b361076a565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614610562578181815181106104e8576104e861076a565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166302ce728f6040518163ffffffff1660e01b815260040160408051808303816000875af115801561053b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055f919061089b565b50505b8061056c8161098c565b915050610480565b5050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156105ee576105ee610578565b604052919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461061857600080fd5b50565b6000602080838503121561062e57600080fd5b823567ffffffffffffffff8082111561064657600080fd5b818501915085601f83011261065a57600080fd5b81358181111561066c5761066c610578565b8060051b915061067d8483016105a7565b818152918301840191848101908884111561069757600080fd5b938501935b838510156106c157843592506106b1836105f6565b828252938501939085019061069c565b98975050505050505050565b60005b838110156106e85781810151838201526020016106d0565b838111156106f7576000848401525b50505050565b600081518084526107158160208601602086016106cd565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b821515815260406020820152600061076260408301846106fd565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156107ab57600080fd5b81516107b6816105f6565b9392505050565b6000602082840312156107cf57600080fd5b815167ffffffffffffffff808211156107e757600080fd5b818401915084601f8301126107fb57600080fd5b81518181111561080d5761080d610578565b61083e60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016105a7565b915080825285602082850101111561085557600080fd5b6108668160208401602086016106cd565b50949350505050565b60006020828403121561088157600080fd5b5051919050565b6020815260006107b660208301846106fd565b600080604083850312156108ae57600080fd5b825180151581146108be57600080fd5b6020939093015192949293505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561090f5761090f6108ce565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561094c5761094c6108ce565b500290565b600082610987577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156109be576109be6108ce565b5060010190565b6020808252825182820181905260009190848201906040850190845b81811015610a1357835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016109e1565b5090969550505050505056fea26469706673582212208178873717af20d00366e85ae4e5438f9da51fe74b6a4a8752b9c59679bb112864736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}